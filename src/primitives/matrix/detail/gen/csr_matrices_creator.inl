/****************************************************************************
** 
**  Copyright (C) 2019-2020 Boris Krasnopolsky, Alexey Medvedev
**  Contact: xamg-test@imec.msu.ru
** 
**  This file is part of the XAMG library.
** 
**  Commercial License Usage
**  Licensees holding valid commercial XAMG licenses may use this file in
**  accordance with the terms of commercial license agreement.
**  The license terms and conditions are subject to mutual agreement
**  between Licensee and XAMG library authors signed by both parties
**  in a written form.
** 
**  GNU General Public License Usage
**  Alternatively, this file may be used under the terms of the GNU
**  General Public License, either version 3 of the License, or (at your
**  option) any later version. The license is as published by the Free 
**  Software Foundation and appearing in the file LICENSE.GPL3 included in
**  the packaging of this file. Please review the following information to
**  ensure the GNU General Public License requirements will be met:
**  https://www.gnu.org/licenses/gpl-3.0.html.
** 
****************************************************************************/

// This file is automatically generated by autogen_creator tool using cppcgen library.
// Do not hand edit! Consult tools/autogen contents to introduce any changes.

if (I4_type == I32_TYPE) {
    if (I3_type == I32_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint32_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint32_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint32_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint32_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    #ifndef XAMG_LIMIT_TYPES_USAGE
    else if (I3_type == I16_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint16_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint16_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint16_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint16_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    else if (I3_type == I8_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint8_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint8_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint8_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint8_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    else if (I3_type == I64_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint64_t, uint32_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint64_t, uint32_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint64_t, uint32_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint64_t, uint32_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    #endif // XAMG_LIMIT_TYPES_USAGE
    else {
        assert(0);
    }
}
#ifndef XAMG_LIMIT_TYPES_USAGE
else if (I4_type == I16_TYPE) {
    if (I3_type == I32_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint32_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint32_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint32_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint32_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    #ifndef XAMG_LIMIT_TYPES_USAGE
    else if (I3_type == I16_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint16_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint16_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint16_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint16_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    else if (I3_type == I8_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint8_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint8_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint8_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint8_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    else if (I3_type == I64_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint64_t, uint16_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint64_t, uint16_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint64_t, uint16_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint64_t, uint16_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    #endif // XAMG_LIMIT_TYPES_USAGE
    else {
        assert(0);
    }
}
else if (I4_type == I8_TYPE) {
    if (I3_type == I32_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint32_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint32_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint32_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint32_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    #ifndef XAMG_LIMIT_TYPES_USAGE
    else if (I3_type == I16_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint16_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint16_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint16_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint16_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    else if (I3_type == I8_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint8_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint8_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint8_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint8_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    else if (I3_type == I64_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint64_t, uint8_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint64_t, uint8_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint64_t, uint8_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint64_t, uint8_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    #endif // XAMG_LIMIT_TYPES_USAGE
    else {
        assert(0);
    }
}
else if (I4_type == I64_TYPE) {
    if (I3_type == I32_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint32_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint32_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint32_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint32_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    #ifndef XAMG_LIMIT_TYPES_USAGE
    else if (I3_type == I16_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint16_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint16_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint16_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint16_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    else if (I3_type == I8_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint8_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint8_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint8_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint8_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    else if (I3_type == I64_TYPE) {
        if (I2_type == I32_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint32_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint32_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint32_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint32_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint32_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint32_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint32_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint32_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint32_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint32_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint32_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint32_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint32_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint32_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint32_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint32_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint32_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint32_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint32_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint32_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint32_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint32_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint32_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint32_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint32_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint32_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint32_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint32_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint32_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint32_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint32_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint32_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #ifndef XAMG_LIMIT_TYPES_USAGE
        else if (I2_type == I16_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint16_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint16_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint16_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint16_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint16_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint16_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint16_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint16_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint16_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint16_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint16_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint16_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint16_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint16_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint16_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint16_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint16_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint16_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint16_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint16_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint16_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint16_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint16_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint16_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint16_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint16_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint16_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint16_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint16_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint16_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint16_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint16_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I8_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint8_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint8_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint8_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint8_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint8_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint8_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint8_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint8_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint8_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint8_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint8_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint8_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint8_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint8_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint8_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint8_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint8_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint8_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint8_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint8_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint8_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint8_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint8_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint8_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint8_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint8_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint8_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint8_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint8_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint8_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint8_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint8_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        else if (I2_type == I64_TYPE) {
            if (I1_type == I32_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint32_t, uint64_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint32_t, uint64_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint32_t, uint64_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint32_t, uint64_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint32_t, uint64_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint32_t, uint64_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint32_t, uint64_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint32_t, uint64_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #ifndef XAMG_LIMIT_TYPES_USAGE
            else if (I1_type == I16_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint16_t, uint64_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint16_t, uint64_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint16_t, uint64_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint16_t, uint64_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint16_t, uint64_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint16_t, uint64_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint16_t, uint64_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint16_t, uint64_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I8_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint8_t, uint64_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint8_t, uint64_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint8_t, uint64_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint8_t, uint64_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint8_t, uint64_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint8_t, uint64_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint8_t, uint64_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint8_t, uint64_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            else if (I1_type == I64_TYPE) {
                if (F_type == F64_TYPE) {
                    auto ptr = new csr_matrix<float64_t, uint64_t, uint64_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float64_t, uint64_t, uint64_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float64_t, uint64_t, uint64_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float64_t, uint64_t, uint64_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else if (F_type == F32_TYPE) {
                    auto ptr = new csr_matrix<float32_t, uint64_t, uint64_t, uint64_t, uint64_t>(sharing_mode);
                    convert<F, I1, I2, I3, I4, float32_t, uint64_t, uint64_t, uint64_t, uint64_t>(block, *ptr);
                    obj = std::shared_ptr<csr_matrix<float32_t, uint64_t, uint64_t, uint64_t, uint64_t>>(ptr);
                    #ifdef XAMG_DBG_HEADER
                    XAMG::out << XAMG::ALLRANKS << ">> csr_matrix: float32_t, uint64_t, uint64_t, uint64_t, uint64_t" << std::endl;
                    #endif
                }
                else {
                    assert(0);
                }
            }
            #endif // XAMG_LIMIT_TYPES_USAGE
            else {
                assert(0);
            }
        }
        #endif // XAMG_LIMIT_TYPES_USAGE
        else {
            assert(0);
        }
    }
    #endif // XAMG_LIMIT_TYPES_USAGE
    else {
        assert(0);
    }
}
#endif // XAMG_LIMIT_TYPES_USAGE
else {
    assert(0);
}
